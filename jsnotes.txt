
Html -> structure 
css  -> styling 
js   -> action

Javascript:
      1)it is used to create a action to our website.
      2)js is a scripting language.   
      3)it is interpreter language.
      4)it support all the browser.
      5)95% of  developer using javascript.
      6)it is a case sensitive language. 
      7)Popular scripting language.    (python,javascript)  

--------------------------------------------------------------------------------------------------------
               html  -> form  FORM ->correct ->non case sensitive
                       apple ->Apple -->correct
------------------------------------------------------------------------------------------------------
              css ->case sensitive language
                      #head{
                      }
              <h1 id="Head">Home</h1>  ->wrong
--------------------------------------------------------------------------------------------------------
              js-->apple  -->apple 
              Apple ->wrong
              aPPLE ->wrong
--------------------------------------------------------------------------------------------------------

Application:
      1)client-side validation     server side ->backedn
      2)display system time and date
      3)form validation
      4)show and hide content
      5)alert,confirm,prompt
      6)gaming application


     32  16  8  4  2 1
10 ->0   0   1  0  1 0           1010
24 ->0   1   1  0  0 0
360

"hello"  -> 0101010101

"hello" -> high level -> human can understand
001010101011 -> machine can understand

translator : used to translate high level to low level.


translator types:
1.compiler
2.interpreter


compiler                      interpreter
c,c++                         python,javascript,java,C#

It scans the whole            it scans line by line.
program one in go.

It execute all errors         it shows one error at a time
and warnings at a same 
time after executing the 
program.

Execution time is less.       execution time is more.

error solving process is      error solving is easy.
difficult or it will take     less time is required.
more time



scripting language               programming language

python,javascript                c,c++,java,c#

less coding less syntax          we have more coding

more libraries                   less library

no main method                   main method  root  
 
its possible to add html css     c -> we can't able to add other programming 
into javascript                            
   

js, python : max,min ->max(50,70,80,90,60) 90
c,c++ -> to find max and min we have to write 10 to 15 lines of code

Types of javascript:

1)inline js
2)internal js
3)external js

inline js: inside the tag

<button onclick="">submit</button>
------------------------------------------------------
internal js:
inside body last,after body is possible

<script>
   js code
</script>

external js:

    js file ->index.js
    css -> <link rel="stylesheet" href="./index.css">
    html page -> link -> <script src="./index.js"></script>


Output Possiblilities:

1)alert()        ->alert box
2)document.getElementById....()  ->if you want to change particular element value on browser page
3)document.write()  ---> display the message on browser
4)console.log()  -->for inspect element ->console->click->it will show the output in console window
                    checking purpose we are using console.log() this is not a permanent.


common datatype :

integer->67,56,87,699      age
float ->5.7,3.7           salary       
char   ->'a',     "p"  in javascript we don't have any char datatype
string -->group of characters ->"raju",'siva'
boolean  ->true(1),false(0)

--------------------------------------------------------

variable :
      variables are used to store the value;
      Then we can access the value throughout the program.
    
syntax:
     keyword  variablename(or)identifier  =  value;

example:
     let balanceamount=500000;

iN VALUE:
if it is number (integer,float)  ->56,78,98.78
if it is string or character     ->'reenu' ,"reenu"
      
types of keywords:

1)var  
2)let     
3)const  

let a; declaration
let a; redeclaration notvalid
let b=10; -> initialization
b=15; -> updation


declaration       redeclaration       initialization       reinitialization/update
var a;            var a;   yes         a=10;yes         a=20  yes

let b;            let b;   no          b=20;yes              b=30  yes

const c;          const c; no          c=30;yes              c=5   no


Rules of Identifier(or)variablename: 
        1)variable name should be a meaningfullname
                   let studnetname='';
        2)Identifier should be start with alphabets and underscore.
                   let name, let _name   valid
        3)identifier should not start with number or any special characters
                  let 1student,let %data    
        4) identifier can contain number
                  let student1 
        5)identifier should not consider a keyword 
                  let let=10
        6)should not contain special character
                  let stu$name
        7)should not contain spaces
                 let student mark notvalid
                 let student_mark  valid
                 let studentMark   valid   camelcase
                 let Studentmark   valid  snakecase

        
 
datatypes in js:
    it is used to define the type of variable.
    javascript is a typeless language

typeless:

in c  typed language              js typeless

int a=10;                          let a=10;
a='c'    wrong                     a="data"

primitive data type          reference data type

number                        array
string                        object
undefined                     function
null
boolean

1) number - it accept integer values and floating values also.

     let value=10;  number as a datatype
     let data=10.8;  number

2) string ->group of characters

    let name="reenu";   datatype string 
    let studentname='lakshmi';   datatype string

3) undefined  ( only declaration  not initialization)
           
    in future we can add the value;
    let name; --->undefined;

    let min=1000;
axis bank let min;

    min=500;

4) null -->empty

   it display the output as object.
   let count=null;

10 -> sql
    table
   1  a   1000
   2  b   null
   3  c   2000

5) boolean ->true or false  

    let present=true;
    present=false;

reference data types:
   These datatype are derived from the primitive data type.
1)array
why we need array?
 
      it is similar to number and string;
      variables are used to stored only one value.

In variables:
          let mark1=100;
          let mark2=100;
          let mark3=100;
          let mark4=90;
          let mark5=40;

here i need 5 lines to store 5 marks.
it is taking separate memory spaces also.


overcome this problem we have array in js :

     array is used to store the multiple values;  let mark=[100,90,89,78,67,56]
     index value starts from 0; 
     it is continuous memory allocation.                             0  1  2  3  4  5
     In js array is a multiple datatype.


in c,c++,java   ->similar datatype
                [1,2,3,4,5,6,7]      ->valid
                [5.6,8.7,7.8]        ->valid
                ["shgxh","sd","shgxd"] ->valid

                [1,4,7.6,"reenu"]  ->invalid

advantages of js: accept multiple datatype

                [1,2,3,4,5,6,7]      ->valid
                [5.6,8.7,7.8]        ->valid
                ["shgxh","sd","shgxd"] ->valid
                [1,4,7.6,"reenu"]  ->valid

syntax:

     keyword arrayname=[number of elements separated by ,]
     let marks=[100,90,80,90,99];    
     index  -> 0   1  2  3  4  

object:
    object is also used to store the multiple value.
    but in the form of keyvalue pairs.

syntax:

keyword  objectname={
    key:value,
    key:value,
    key:value
        .
        .
        .
    n number of 
    key:value
}

let studentdetails=['raj','kumar','Ram']

let studentdetails={
     stufirstname:'raj',
     stulastname:'kumar',
     fathername:"ram"
}

types of accessing object values:
1.dot notation
2.bracket notation

functions:(behaviour,action)

   function are used to perform a particular task.
   we can split the big program to small small sub division using functions. 
   functions are reusability.


ecommerse:

login
logout
signup
next
previous
collections

game:
start
stop
login
logout
settings
restart
pause


types of functions: 
   1.pre defined functions    ->library function     we can use
            console.log()     
            alert()
            document.write()
  
   2.user defined function  add,sub,mul,start,stop   we have to create 
   
syntax:
    keyword
   function  functioname()  
   {
      statement;         // function definition
   }

   functioname();        // function calling


----------------------------
comment lines in js:

html : <!-- content -->
css  : /*   ---  */
     it is used to share the information about the code to the another developer or testor
     developer purpose not for the user purpose
type:
1)single line comment//
2)multi line comment
/*         
---------------
---------------
*/

output:

     1.alert
     2.console
     3.document.write
     4.document.getElementByid

Input:

prompt

form


prompt window:  (collect the values from the user

how to get the values from the user:

string:
   let name= prompt("information");

integer:
   let age=parseInt(prompt("information));   56,78,98,78

float:
    let salary=parseFloat(prompt("information"));  4567.667, 68787.77

operators:
       operators are used to perform some particular operations.
ex:  c=a+b-d;//expression
operand              operators

c,a,b,d                +,=,-

Expression:
  it is a combination  of operands and  operators.
     c=a+b-d;


types of operator:
1)unary operator      only one operand to perform the operation. ++a,--a,!a    ++a     a+b
2)binary operator     a+b,a-b,a>b,a<b   a<b
3)ternary operator    a?b:c   

types of operators:

1)arithmetic operator (+,-,*,/,%)
2)assignment operator (=,+=,-=,*=,/=,%=)    3/3=1 Quo    3%3=0 rem
3)relational operator (<,>,<=,>=,==,!=)
4)Logical operator    ( and (&&) ,or (||) ,not(!)
5)Increment and Decrement operator (++,--) 
6)Bitwise Operator    (bitwise and(&),or(|),not(~),exor(^),
                      leftshift(<<),rightshift(>>)
7)Equality Operator   (===,!==)
8)Ternary Opeartor    a?b:c  
9)comma operator   



arithmatic operator in js:
+ ,-, * , /(Quotient), %(Remainder)   

  __1___ Q
4 | 4           4/4 -> 1   4%4=0
  | 4
  -----
    0   R


precedency level and associativity level:
precedency in arithmetic:

     1st precedence -> * /  %
     2nd precedence -> +  -

associativity level arithmatic operator:  left to right



let a=1,b=3,c=5,d=7,e=1,f=2;

let res=a+b-c*d-e+f/b-a;   
        1+3-5*7-1+2/3-1;

        1+3-35-1+0.667-1
        4-35-1+0.667-1
        -31-0.333-1
        -32.333333

let a=1,b=3,c=5,d=7,e=1,f=2; 
1) let res=a-b*c+d/e+f*c+d-e; 
console.log(res);
--------------------------------------------------------------------------------------
assessment:
let a=10,b=5,c=7,d=8,e=6,f=7,g=4,h=3,i=6,res;
1)res= a+b-c*d/e+f-g-h;    
2)res= a*b*c*d-e+f/1+h-i; 
3)res= a+b-c+d*e-f-g+h+i; 
4)res= a-b-h*4+6/6+d-i; 
5)res= a-b-c-d-e-f*45-0;
--------------------------------------------------------------------------------------

assignment operator:
    it is used to assign the value to the variable.
a=10;
associativity level : right to left
precedency is low.

the 10 value is stored in that variable of a.

swapping of two values  with using third variable;
let a=10,b=20;
ouput: a=20  b=10   


(=,+=,-=,*=,/=,%=)

let a=10;
console.log(a+2)//  12  
console.log(a) //10  because we didn't store the value


let b=20;
console.log(b)//20
b=b+7   //b+=7       a=b+c      a=a+b-c    a+=b-c
console.log(b)//27 because we assigned the updated value



swapping of two values  without using third variable;

---------------------------------------------------------------------------------------------
relational Operator:
           it is used to check the relationship between two or more operands.
           it will display the output as true(1) or false(0).
< ,(less than)      
> ,(greater than)
<=,(less than or equal)
>=,(greater than or equal)
==,(equal equal)
!=,(not equal)

3>4  -> false
4>4  -> false
4>=4 -> true
3>=8 -> false
4==4 -> true
4!=6 -> true
4!=4 -> false

let sal;
who all are  getting the salary more than 10000

sal>10000

major
age>=18   age>17
 18>=18    18>17

password:abc123
cpassword:abc123
password==cpassword


precedence level  1st   <  >  <=  >=
                  2nd   == !=
associativy level left to right

let a=0,b=7,c=1,d=0,e=1,f=9
    res=a<b<c>=c!=d>a<e==5
    res=0<7<1>=1!=0>0<1==5
         _ _ _     _ _
         1<1>=1!=0>0<1==5
         0>=1!=0>0<1==5
         0!=0>0<1==5
         0!=0<1==5
         0!=1==5
          1==5 false




ass:   
let a=0,b=7,c=1,d=0,e=1,f=9
1) res = a>b<=c!=d >a <b==d;
2) res = a+b-c>a<b*d>e-f>=b;
3) res = a<b>c==d!=a==0>b<a;





logical operator:

1)logical and  (&&)  login ->username && password
2)logical or   (||)  (email || mobileno) && password
3)logical not  (!)

AND  (both value should be present)       

 input  output
 0  0    0
 0  1    0
 1  0    0
 1  1    1

OR  (any one of the input is true output will be true)

input  output
 0  0    0
 0  1    1
 1  0    1
 1  1    1

NOT   
input  output
 0       1
 1       0

and ->  1st  0   it is necessary to check second value -> no
        1st  1                                           yes

or  ->  1st  0   it is necessary to check second value -> yes
        1st  1                                            no

-------------------------------------------------------------------------------------------

increment and decrement operator:
     
  ++,   --

     1)increment  operator is a unary operand. ++a;   
     2)so it is increasing the value one by one.

                      -------------------------
difference between + and ++ operator:

+  ->a+b ->arithmetic operator
++ ->a++;--->increase the value one by one
     a=2;
     a++;   ->3,4,5

types of Increment Operator:
     1.pre increment(++a)                  
            working:
            step 1:  it increase the value
            step 2:  assign the value

     2.post increment(a++)   
            working:
            step 1:  assign the value 
            step 2:  it increase the value
            

types of decrement operator:
     1.pre decrement(--a)
            working:
            step 1:  it decrease the value
            step 2:  assign the value

     2.post decrement(a--)
            step 1:  assign the value
            step 2:  it decrease the value


let a=3,b=6,c;

c=++a;
console.log(a ,c);4 4  

 
c=a++;
console.log(a ,c);4 3


let a=2,b=4,c;

c=a++ + ++b;
c=2++ + ++4;
c=2++ + 5
c=2+5=7
console.log(a , b, c) //   
            3   5   7
ass:

let a=5,b=3,c=2,d=1,e=7,f;
f= a++ +  ++b - --c + ++d + e--; 
f=b++ + 4-- + --a + e++ + --a; 

interview:

console.log("3">1)   

 true   reason
based on relational operator it will implicit(automatic system conversion) string data
type to number data type so thats why we got true because 3>1 true

console.log("hello">1)   false 

ascii
a to z - 97 to 122
a   b      c      d   e    f     g    h      i
97 98     99     100   101 102   103  104   105
A to Z - 65 to 90

"abc">"bca"   false
97>98

"hi">"hi" false

"hi" > "hg" true
 104+105
   209 > 207



Type conversion:
 used to convert one type of data into another type of data

type:
implicit   automatically interpreter will 
           convert to one type of data to another type of data based on priority
explicit   manually we have to convert
           ParseInt(prompt(""))



-------------------------------------------------------------------------------
bitwise operator:
    bitwise operator are used to perform bit level like binary(0 and 1).
    it will return binary values.


1 byte= 8 bits
   128  64  32 16 8  4  2 1

bitwise and(&)
bitwise or(|)
bitwise  not(~)
bitwise  exor (^)
bitwise leftshift <<
bitwise rightshift >>

convert binary values:

    8 4 2 1
1   0 0 0 1   
2   0 0 1 0
3   0 0 1 1
4   0 1 0 0
5   0 1 0 1
6   0 1 1 0
7   0 1 1 1
8   1 0 0 0
9   1 0 0 1
10  1 0 1 0
11  1 0 1 1

  1 byte = 8 bits
  2 byte= 16 bits
  4 bytes = 32 bits
  8 bytes = 64 bits


----------------------------------------
bitwise and operator:(&)

let a=10, b=15;
let c= a & b;
console.log(c);

       128  64  32  16   8  4  2  1 

10     0     0  0    0   1  0  1  0 
15     0     0  0    0   1  1  1  1  
10&15  0     0  0    0   1  0  1  0    10       
--------------------------------------------------------------------------



asse:

let a=30, b=14,c;
c= a&b;
console.log(c); 14

bitwise or:

let a=38, b=42,c;
c=a|b;
console.log(c) 12

       128  64  32  16   8  4  2  1 

38     0     0  1    0   0  1  1  0 
42     0     0  1    0   1  0  1  0  
|      0     0  1    0   1  1  1  0    46

bitwise not:
    
shortcut :
      -(variablevalue+1)  -(38+1)  -(39)  -39

let a=5;
let b=~a; //-(5+1) -(6)  -6
console.log(b);//-6                     ~42=-43

let a=28;
let b=~a;
console.log(b)  //-(28+1) -29



bitwise exor(^):

input  output
0  0    0
0  1    1
1  0    1
1  1    0

let a=40,b=53;
let c= a^b;
cosnole.log(c); 

       128  64  32  16   8  4  2  1
40      0   0    1  0    1  0  0  0
53      0   0    1  1    0  1  0  1
------------------------------------
40^53   0   0    0  1    1  1  0  1    ->29
-------------------------------------  

a=24 b=14  c=a^b;

bitwise left shift:

let a=10;
let b=a<<2; 2 times i want to shift

     128  64  32  16   8  4  2  1

a=10  0   0   0   0    1  0  1  0
a<<1  0   0   0   1    0  1  0  0
a<<2  0   0   1   0    1  0  0  0 
--------------------------------
                32+8=40

shorcut:
variablevalue*2^number of shifts
 10*2^2
 10*4
 40     

right shift:

let a=25;
let b=a>>3;
console.log(b) 3


     128  64  32  16   8  4  2  1

a=25  0   0   0   1    1  0  0  1
a>>1  0   0   0   0    1  1  0  0
a.>2  0   0   0   0    0  1  1  0
a>>3  0   0   0   0    0  0  1  1
------------------------------------

shortcut:rightshift

variable value/2^number of shift 

25/2^3
25/8
3

----------------------------------------------------------------------------------------


Equality Operator(===) (!==):
      !=   !==
=  ,  == , ===

= -->used to assign the value  -->let a=10;

==  ->relational operator ->used to check the relationship 
     it is checking only the values not a datatype    

=== ->used to check the relationship b/w two values. 
     it is checking the values and datatypes also.


let a=10,b=10;

console.log(a==b); 10==10 true
console.log(a===b); 10===10 true 

let a=10,b="10";
console.log(a==b);   10=="10"  true 
console.log(a===b);  10==="10" false

console.log(10!=="10")   true
console.log(10!==4)      true 
console.log("10"!=="10")  false  

--------------------------------------------------------------------------------------------
Ternary Operator or conditional operator: a?b:c
     Used to check the condition;
syntax:
       condition ? "statement1" :"statement2"
         |             |             |
         |___true______|             |
         |                           |
         |____________false__________|


// collect the age from the user
// check whether the person is major or minor.

//collect a and b value from the user  a=10 b=15   b is greater
//check which one is greater 

//collect the password and confirmpassword from the user  123   123
// check password matched with the confirm password or not

//collect mark from the user.
//mark is between 90 to 100 we have to display good marks
//else better luck next time

----------------------------------------------
Control statements :
       control statements are used to control the flow of  execution.  

real tie:
1) fan -> control ->regulator
2) tv  -> control ->remote

login -> control
username &password  both are present ->give the access to go to home page of facebook
username &password  duplicate data  it will give the error message as please provide valid data.
username & password   empty    please fill all the details.

types of statements:

1.sequential statement
2.conditional statement or non-iterative statement
3.iteration statement or looping statement
4.unconditional statement or jumping statement

1.sequential statement
       it is executing step by step manner.
       it won't skip any of the lines.
example:
     let a=10,b=20;
     let c=a+b;
     console.log(c); //30

2.conditional statement  (or) non iterative statements  (or) decision making
      conditional statements are used to check the condition.
      based on the condition some of the lines will be execute and some of the line will be skipped.

types of conditional statement:
1)if
2)else
3)else if
4)switch
5)nested if


if: we can check the condition
syntax:

if(condition)  true
{
   //statements;
}

else: there is no condition checking only the execution.

if(condition)
{
   statements;
}
else{
   //statements.
}

without else we can write if block;
but without if we can't write else.

1. 
1)get 2 numbers from the user like a,b or num1,num2;
2)write the condition for printing a is greater in if condition
3)else you can print based on b.


some interview application:()
2. 

1) get the age from the user
2) if the user age is above 18 give the alert message major and you are elligible
for this job.
3) else not eligible for this job. minor 

3.
1) get the password and confirmpassword from the user.
2) check password and confirmpassword are equal give alert message as "password matched"
3) else "password not matched";

4.
1)store regtimeusername and regtimepassword.
1)get the username, passwordfrom the user for login time
2)username,password should be present and as well as it should equal with reg time data.
3)else alert ->please enter the valid data

regpass=123
reuser="abc"

logintime:
name="abc"
pass=123  ------------->valid    login success

logintime:
name="ab"
pass=123  ------------->invalid   login failure please provide valid datas



5.
1)get any one numbers from the user 
2)number is 2,4,6,8,10,56,44,263578,765372893619623626  ->alert("number is even")
3)number is 1,3,5,7,9,11,13  ->alert("number is odd")

6.
1)collect any letter from the user 
2)check the letter is vowels or not.

vowels : a e i o u A E I O U     
consonant:w t y h 

7.
multiple if condition :

collect 3 number from the user
check the highest number among them.

let a=10
let b=12
let c=3
b is greater

if
else

else if:
    if you want to check multiple conditions like greater than ,less than, 
equal  then you can use else if.

syntax :

if(condition)
{
   //statements
}
else if(condition)
{
   //statements
}
.

//n number of
else if(condition)
{
  statements
}
else{
    //statement;
}


1)find greatest among three values

     a. collect 3 values from the user
     b.write the condition for a is big or b is big or c is big


1.get the mark from the user out of 100 per subject
2.if the mark 91 to 100 ->'A grade'    
3.if the mark 81 to 90  ->'B Grade'
4.if the mark 71 to 80  ->'C Grade'
5.if the mark 61 to 70  ->'D Grade'
6.if the mark 50 to 60  ->'E Grade'
7.below 50              ->Fail U grade


1. collect 5 marks from the user
2. find Total mark
3. Based on totalmark display scholorship
    i) if the mark 450 to 500  ->'100% S.c'  
    ii)if the mark 400 to 450  ->'75% s.c'
    iii)if the mark 350 to 400  ->'50% s.c'
    iv)if the mark 300 to 350  ->'35% s.c'
    v) below 300               ->Sorry! Better luck next time
4. average mark   sum of marks/total subject
5. percentage 


mark1:------------
mar


switch:
    it is used to check the value not a condition.
syntax:
switch(value) //2
{
   case 0:'a','Monday'  45.66
        statements;
        break;
   case 1:
        statements;
        break;
   case 2:
        statements;
        break;
   default:
        statements;
}

1) get the option from the user + - * / %
2) after selecting the option user will have to give 2 values like a and b
3) write the case for operations like addition ,sub,mul,div,mod


collect the choice from the user
1.add(a) 2. sub(s)   3.mul(m)  4.div(d)
collect 2 number from the user
based on that i have to execute like a calculator



                 Restaurant name
          
              Breakfast      Lunch

              snacks         dinner
                      



nested if:

      if condition inside another if like this we can create multiple 
if and else based on the conditions.

syntax:

if(condition){  
     if(condition)
     {
        statement
     }
     else{
         statement
     }    
}
else{
    if(){
    statement
    }
}


3.looping statement  (or) iterative statement
     looping statements are used to execute some of the lines more than one time.
types:

1.for
2.while  -> flight ,train travel
3.do while -> bus
4.nested for loop

for loop:

syntax:

keyword
for(initialization;condition;inc/dec)
{
      statements;
}

program: 

1) write the program to print -5 to 10   

2) write the program for 10 to 20    

3) write the program for 10 to 1

4)write the program for 2,4 like even number   100   1,2,3,4  0 2 4 6 8 10

5)write the program for 1,3 odd numbers

6)write the program for 5 series( 5,10,15,20)


7) write the program to print table using for loop
static:

user -> collect table number

1*2=2
.
.
.
20*2=40

1*2=2
2*2=4
3*2=6
4*2=8
.
.
.
10*2=20



Question

   n=10
1) 0*0*0*0*0*
   12345678910

2) ..!..!..!..!..!
   123456789



3)1 4 3 8 5 12 7 16........

  1 2 3 4 5 6  7 8  9  

ass:

1) 10 2 30 4 50 6 70.....
    1 2 3  4 5  6  7

   
2) 5 25 125  --- ......


  let value=5;//25
     value=value*5;//25



   3 9 27 ......
   10 100 1000 .......

3) 3 4 9 8 15 12 21.......
   1 2 3 4 5  6  7

4) sum of n natural number
  
1+2+3+4+5+6+7+8+9+10=  55

5) factorial program

5!->  5*4*3*2*1  
      1*2*3*4*5
10!-> 10*9







fact=1
5!=120
5*4*3*2*1=
1*2*3*4*5
factorial program

3! 3*2*1      6
5! 5*4*3*2*1  120
105!

 
5!  

1*2*3*4*5 120

for 1 to n

fact 1*2*3*4*5

___________

product initialization ->1   0*n =0
sum     iniatialization ->0  
___________

1)write the program to print sum of n natural number
________________________

1) getdetails button
2) how many students data you want to collect    -> prompt
3) 5 student data name,age,marks,email,password

******************************************************
                _________Student 1_______
                     Name : 
                     Age  :
                     Marks :
                     Email :
                     Password:
               ____________________________
                _________Student 2_______
                     Name : 
                     Age  :
                     Marks :
                     Email :
                     Password:
                ____________________________
                 _________Student 1_______
                     Name : 
                     Age  :
                     Marks :
                     Email :
                     Password:
               ____________________________

*******************************************************
__________________________


for(initialization;condition;inc/dec)
{
     statements;
}


while:  train,flight
step 1: check the condition
step 2: execute the code

syntax:

initialization;
while(condition)  
{
     statement;
     inc/dec;
};


do while:    bus 

step 1: execute
step 2: check the condition

syntax:

initialization;
do
{
     statement;
     inc/dec;
}
while(condition);

ass: print 200 to 100

let i=200;
do{
   document.write(i+"<br>")
   i--;
}while(i>=100);





let i=200;
do{
   console.log(i);
   i--;
}
while(i>=100);




diff b/w for and while loop

if you know the starting and destination ---->for loop      --->paper printing mills  ->per day 500 papers
if you don't know the destination ----------->while loop    --->atm  we don't know    ->per day we don't know 
         



                                                                              
nested for:

1) continuos star and each row same number of stars
2) continuous stars and each row different coloumns
3) continue space and continue stars but each row diff stars and diff spaces


******  single for loop


nested for loop to compare row values and column values
 012
0***
1***
2***
3***
4***

syntax:
//outer for loop
for(initialization;condition;inc/dec)  //row   i
{    
    //inner for loop before row
    for(initialization;condition;inc/dec)   //coloumn   j
    {
         statements;
    }
after row
    statements;
}




     01234
i=0  *
  1  **
  2  ***
  3  ****
  4  *****





n   i    j(stars)
5   0    1       
5   1    2       
5   2    3       
5   3    4       
5   4    5       
    i<5   j<i+1




assessment:
1)

*****
****
***
**
*

n   i    j
5   0    5       0
5   1    4       1
5   2    3       2
5   3    2       3
5   4    1       4




2)

  0 1 2 3 4
0         *
1       * *
2     * * *
3   * * * *
4 * * * * * 
    
r  i  j  s
5  0  1  4
5  1  2  3
5  2  3  2
5  3  4  1
5  4  5  0


   i<row  j<i+1     s<row-1-i
3)
   * * * * *
     * * * *
       * * *
         * *
           *

r  i  j  s
5  0  5  0
5  1  4  1
5  2  3  2
5  3  2  3
5  4  1  4

  i<row j<row-i s<=i

0************
1 ************
2  ************
3   ************

n   i  j   s
4   0  12  0 
4   1  12  1
4   2  12  2
4   3  12  3
   



       *
      ***
     *****
    *******
   *********
  ***********

r   i   j   s
6   0   1   5
6   1   3   4
6   2   5   3
6   3   7   2
6   4   9   1
6   5   11  0

   i<=5   s<5-i  j<2*i+1 



    **************
   **************
  **************
 **************
*************

      *
     * *
    * * *
   * * * *
  * * * * *


***********
 *********
  *******
   *****
    ***
     *
r   i   j   s
6   0   11  0
6   1   9   1
6   2   7   2
6   3   5   3
6   4   3   4
6   5   1   5

   i<=5   s<i  j<2*(row-i)-1 

Alphabet pattern:

i,j

5)
    j 0         1       2       3       4
i=0   *		*	*	*	*
      0,0      0,1     0,2     0,3     0,4
i=1                     *
                       1,2
i=2                     *
                       2,2
i=3                     *
                       3,2
i=4   *		*	*	*	*
      4,0       4,1    4,2     4,3     4,4



      

6) 
    0123456
  0 *******
  1 *
  2 *******
  3       *
  4 *******

7)  *******
       * 
       *
       *
8)E,F,H,L

 0 1 2 3 4 5 6
0* * * * * * *
1*           *
2*     *     *
3*           *
4* * * * * * *

9)
 0 1 2 3 4
0*
1* *
2*   *
3*     *
4* * * * * 

 0 1 2 3 4
0        *
1      * *
2    *   *
3  *     *
4* * * * * 
0 4
1 3
2 2
3 1
4 0

 0 1 2 3 4 5 6

0*           *
1  *       *
2    *   *
3      *
4    *   *
5  *       *
6*           *

i j
0 6
1 5
2 4
3 3
4 2
5 1
6 0
-----


    0 1 2 3 4
4) 01 0 1 0 1
   11 0 1 0 1
   21 0 1 0 1
   31 0 1 0 1
   41 0 1 0 1

0   11111
1   00000
2   11111
3   00000
4   11111
5   00000
6   11111

A
BB
CCC
DDDD
EEEEE

A
AB
ABC
ABCD
ABCDE


A
BC
DEF
GHIJ
KLMNO

* * * * *
* *   * *
*   *   *
* *   * *
* * * * *


* * * * *
* * * * *
* *   * *
* * * * *
* * * * *

unconditional statement:
   1)break -->break the total flow of loop
   2)continue -->it is used to skip some of the lines

function:

    functions are used to perform some particular task.

why we need functions & advantages:

    1)to reduce the complexity of the code.
    2)reusability.
    3)large program in to multiple sub division.
    4)more readable

types of functions:

  1) predefined functions

           already in the library they are defining some function.      
           console.log(),alert(),prompt(),close(),open()

  2) user defined functions

          except the predefined function we need additional functionality then 
we can use user defined function.    start()  stop() resume()  resatart()  pause() exit()
                                

syntax:(user defined function)

keyword
-------------------------------------------------
function functionname();//add ,start,stop,   startGame  ->camelcase
{ ->start of the function
 
      statements;->terminate the each and every line.   //function definition
 
} ->end of the functions

functionname();//function calling   
--------------------------------      

types of user Defined functions:

1)function
2)arrow function
3)parameter passing function    
4)anonymous function //without function name  (objects)
5)return function
6)IIFE function
7)recursive function
        function call by itself

Arrow Function:

      1) after es6
      2) speed is high compare to normal fuction
      3) it reduce the memory spaces also

syntax:
function functionname()
{
 statement(s);
}

functioncalling();

arrow:
let functionname=()=>{

   statement(s);
}
functioncalling();


parameter passing function:
   only we can access within the block of code
syntax:

function functionname(name,age)
{ 
      statements;
} 

let functionname=(name,age)=>{

   statement(s);
}

passing values:

calling:
functionname("vijay",12)


//anonymous Function : without function name
we are using in objects 

let x=function()
{
    statements();
}
x();

return function:
--------------
    return functions are used to return the value outside of the function scope.
    return line should be last line of the block.
    only one value is possible to retrun
    after return statement it won't execute the rest of the lines

scope of variables:

global scope ->we can accesss throught the program.

local scope ->we can access the data inside of the function body. we cant access outside.

function functionname()
{
   statement;
   return variablename;
}


IIFE function: 

Immediately Invoked Function Expression (or) Self Invoked Function

it called by itself no need to call the function.

Syntax:

(function functionname()
{
   statements
})();

functionname() ---->no need to call the functions.
--------------------------------------------------

Array:
      Array is a collection of values.
      it is user defined datatype
      array index value starts from 0;
      in js&python array is  a multiple data type.

     c c++->[1,2.5,"reenu"] ->multiple data type not valid in c,c++,java 
             [1,2,3,4,5]
             [5.6,6.7,8.9]->similar data type

      javascript ->it accept  all data types

           [1,4,5,7.8,"ram",'c']

why we need to use array?

      let mark=100,
      let mark1=60,
      70,
      80,
      90

let marks=[100,90,99,89,88];


syntax:

keyword arrayname=[elements......];

let marks=[100,90,98,98,78];



predefined methods in array :

*1)length  ->it is used to find the length of the array

*2)push()    ->adding value in  the last index of the array
*3)unshift() ->adding value in the first or 0th index of the array

4)pop()     ->remove value from last index of the array
5)shift()   ->remove the value from first index element


*6)  map()    --->it is used map the value with all the array elements   react
*7)  filter() --->filtered the values based on the conditions

arrayname.filter((e,i)=>e>1000)

*8)   every()  -->it is used check all the elements the given condition is satisfy or not  true or false
*9)   some()   -->it is used to check some of the elements satisfy the condition           true or false
10)   find()   --> find the value from first index to last index. then if it is satisfying any 
                first value in the array it will fetch that value.
*11)  indexof() ->it used to find index position based on array values.
12)   fill()    ->fill some values in to the array elements based on index positions.
13)   slice()   ->slice some values using index position
*14)  reverse() ->used to reverse the array elements
*15)  sort()    -->sort the array in ascending or descending order
*16)  foreach() -->instead of for loop we can use for each
*17)  concat()  -->concat(joining of two or more  arrays  )      
*18)   join()    ->joining some separators in between the array elements
*19)  reduce()   ->add total array values.
*20)  includes() ->check whether the value is present or not in the array  true or false

*21)  splice()  ->add or remove or overwrite array elements
      splice(startindex,deletecount,add element);           abc@gmail.com

interview :
two index:
let num=[3,7,8,3,6]

input: 6  
output:[0,3] 

input: 10
output:[0,1]

input:14
output:[2,4]

input :2
output:no such data


5) find the nth lucky number.

3,is present in the number that number is a lucky number.

3,13,23,30,31,32,33,34,35,36,37,38,39,43,53,63,73,83,93


6) a=[2,4,6] b=[3,2,1]  //c=[5,6,7]  -> reverse  [7,6,5]  -> join()   765
      
output: 765    

a=[2,3,5]  b=[4,6,2]
        
output: 796


7) duplicate element

filter :

1)   let salary=[1000,80000,8000,25000,30000,10000];
     write the program to get who all are getting above 20000
salary.filter((e,index)=>e>20000)
----------------------------------------------------
with using filter method:

2) let age=[23,18,30,45,60,70,25,30,12,15,16,13,17]
   cond 1: i need employee but the age limit is 20 to 30
   cond 2: filter the employee who are above 30
   cond 3: filter the employee for high position so the age limit is 40 to 50
   
------------------------------------------------------
without using predefind function filter method.
3) let dressamount=[100,200,300,500,1000,200,600,800,300,400,200,500]
     cond 1: filter the product below 100
     cond 2: filter the product  500 to 1000
     cond 3: filter the product above 1000



String 
'a' -> character  
"apple" -> grop of character
    it is a group of character
syntax:
    let  stringname="group of character"   'stringname'
              
String Methods:

1.charAt()  ->used to find the character in the given index ->

2.concat()  ->used to add two strings        

3.indexOf()    ->used to find first index values                         

4.match()      ->check the regular expression   -> email regex expression

5.substring()  ->used to find sub string from the string      ->string

6.slice()       ->used to slice the string based on index value   ->array

7.toLowercase() ->used to change upper to lower

8.toUppercase() ->used to change upper case

9.tostring() -> convert number or object to string

10.includes()  

10.split()   convert string to array
    
interview question:

1. let number=123;  string -> array->reverse-> string
   1)write the program to reverse the number

   number to array =[1,2,3]
   //reverse  [3,2,1]
    join    321 -> string
    string parseInt

2. let num1="123"
   let num2="456"

   output:  579

3. let text="hello welcome to all"
    output:  all to welcome hello


4. find  length  of each words
['hello','welcome','to','all']
    hello-5
    welcome -7
    to  -2
    all -3


input: 1234
output: valid
input:5454
output:invalid

Type conversion ->it is used to convert one datatype to 
                  another datatype
                  
                  like integer to float parseFloat()
                       float to integer parseInt()
                       int to string   tostring()
                       string to int   parseInt()
                       float to string tostring()
                       string to float parseFloat()
                       string   array  split("")
                       array    string  join("")

10.lastIndexof() ->used to find last matching character index values  
11.indexoF()  ->used to find first matching character index values  

12.replace() -first occurance
13.replaceAll() -change all occurance



Object:

variable ->stored only one value
array ->stored multiple values

object ->it is used to group the elements but in the format of keyvalue pairs.

why we need object:
	let mark=[100,90,99,88,87];

	we cant identify the sub of the mark 
	so we have move to the object concept
	in object we can identify keyword as well as values
                          	  sub name             mark


let studentdata=['tarun',18,23]


notes:

function ()
array= []
object = {}

syntax:

let objectname={
   key:"value",
   key:"value",
   key:"value",
   key:"value",
   n number of keys and values
} 
  
let studentdata={
     name:'tarun',
     age:18,
     rollno:23
}

how to access the object values:

1) dot notation(.)
2) bracket notation([""])

implementations:

1. object
2. object inside object or factory object
3. object inside array
4. object inside function
5. array of object

-------------------------------------------------------

es6-->ecmascript
    1) javascript Es6 (it is also known as Ecmascript 2015  or Ecmascript 6) is the newer version of js 
that was introduced in 2015.
    2) Ecmascript is the standard that javascript programming language uses.
    3) Ecmascript provides the specification on how js programming language should work.
1)let,const      var

2)Template literals:  ->
     used to combined data and variable

function functioname()  //js
{

}

let functionname=()=>{// es6

}

3)arrow function   

4)IIFE function

Immediately Invoked Function Expression (or) Self Invoked Function
it called by itself no need to call the function.
Syntax:
(function functionname()
{
   statements
})();
functionname() ---->no need to call the functions.



5) spread operator(...)--> it is used to combine multiple arrays at the same time.


6) for in and for of loop

syntax:
for in   it is used to get index value
Z
for(variabletype variablename in arrayname){
     console.log(variablename)
}

for of   it is used to get array values

for (variabletype variablename of arrayname){
     console.log(variablename)
}

7)rest operators(...)   function

      1.the rest operator is an improved way to handle function parameter,allowing us to more easily handle various 
inputs as parameter in a function.
      2.it allows us to represent an indefinite number of arguments as an array.
      3.with the help of rest operator a function can be called with any number of arguments.


add(1,2,3,4,5,6,7,8)

8)scope

    1) global scope  ->we can access outside as well as inside the function also.
    2) local scope   ->we can't access the values outside of the function but we can access inside.


9)Hoisting: (interview)
    Hoisting in JavaScript is a behaviour in which a (function)  can 
be used before declaration or definition.
-----------------------------
display() 
    function display()
    {
        let a=50; 
        console.log(a) //50
    }
----------------------------
function display()
    {
        let a=50; 
        console.log(a)  //50
    }
display()
---------------------------
in Function before definition it will work after also it will work.
how?
  because behind the process Hoisting will work.
 

10)closure:
    function inside another one function

advantage:
    we can access outside function variables inside another one function also.


11)this keyword ->it is used fetch global value in object


12)return function
why?
    In function we can't access local variable outside.
    so overcome this problem we can use return type.


12) Object and Array Destructuring

    Destructing in javascript basically means the breaking down of a complex structure
(Objects or arrays)into simpler parts.
    With the destructing assignment, we can ‘unpack’ array objects into a bunch of 
variables.

pizza ->  fridge -> cooldrinks,breadsheet,cheese,rice,gravi

-------------------------------------------------------------------------------------------------------------
oops: object oriented programming language    
  (security  based application we can use oops concept)

13) Class object   

class: imaginary part,like blue print of the building.    ex: class 3rd year
object: original building ,real like car,chair,laptop     ex:32 student object

    1)Classes are the core of Object-Oriented programming(OOPs).
    2)ES6 introduced classes in javascript.
    3)Classes in javascript can be used to create new Objects with the help of a constructor, 
each class can only have one constructor inside it.
    4)we can create multiple object and single constructor for one class.


object:
     it is a real entity.(own behaviours)
     ex:stu1,stu2,stu3

   	syntax:

	keyword
	class ClassName{   StudentDetails  // classname should be start with uppercase
   	   constructor() //predefined keyword
   	   {
      	    //statement
   	   }
   	   //function // methods  //data member function()
       {
           //statement
       }
	}
	
	object:   
 	
        syntax:      object
                 	instance of the class
	let objectname = new ClassName();

	let stu1=new StudentDetails();
	let stu2=new StudentDetails();


constructor:

     1) constructors are used to initialize the values.
     2) it is automatically called when the object was created for the class.
     3) there is no return type

types of constructor:
1.default constructor
2.parameterized constructor

Ass:
/*
studentdetails as a class name
1. declare following details
       firstname,lastname,age,rollno,fees,marks=[],total;
2. constructor :
       collect all the details from the user.
3.calculatetotalmark:
4.based on totalmark give grade point  
         450 to 500  ->Grade 10
         400 to 450  ->Grade 9
         350 to 400  ->Grade 8
         300 to 350  ->grade 7
         below 300   ->pass  5
5.checknbalancefees:
5,printdetails
 ***********************************************
            name: 
            age:
            rollno
            fees:
            paid:
            balance:
            marks:
            totalmarks:
            gradepoints

**********************************************
*/


/*
employee details
  1.collect the details - name,age,empno,designation,sal,email,password,phonenumber,address
  2.get details()
  3.calculate annualsal()
  4.check whether the email is under regex expression  invalid or valid
  5.password should be contain only 8 character/number/
  6.phone should be only 10 digits
  7.printdetails
  ***********************************************
               name:
               age:
               empno:
               designation:
               sal:
               annualsal:
               email:
               email(valid/invalid):
               password:
               password(valid/invalid)
               phonenumber
               phonenumber(valid or invalid)
               
  ***********************************************  
*/
// ATM 
/*
1.login
2.withdraw
3.deposit
4.checkbalance
*/

class ATM{
    constructor()
    {
        this.users=[
            {
               username:"reenu",
               password:"1234",
               balance:100000
            },
            {
               username:"ram",
               password:"ram@#",
               balance:50000
            },
            {
                username:"kiran",
                password:"@kirankumar",
                balance:75000
            },
            {
                username:"maha",
                password:"maha@123",
                balance:10000
            }
        ]
    }
    loginpage()
    {
        let username=prompt("enter username")
        let password=prompt("entre password");
        for(let i=0;i<this.users.length;i++)
        {
            if(username===this.users[i].username && password===this.users[i].password)
            {
                this.balance=this.users[i].balance;
                alert("login successfully");
                document.write(`<h1>Welcome to ATM BANK<br>    1.Withdraw<br>      2.deposit<br>   3.Checkbalance`)
                break;
            }
            else{
                alert('please provide valid data')
                break;
            }
        }
    }
    getOption()
    {
        let option='y';
        while(option=='y')
        {
            let choice=parseInt(prompt("enter your choice"));
            switch(choice)
            {
                case 1:
                    this.withdraw()
                    break;
                case 2:
                    this.deposit()
                    break;
                case 3:
                    this.checkbalance();
                    break;
                default:
                    alert("please select valid options")
            }
            option=prompt("do you want to continue (yes) y /(no) n?");
    }
    }
    withdraw()
    {
        // alert(this.balance)
        let withdraw=parseInt(prompt("how much you want to withdraw"));
        if(withdraw>this.balance)
        {
            alert("insufficient amount")
        }
        else{
            alert("successfully withdrawn")
        }
        this.balance-=withdraw;//this.balance=this.balance-withdraw
    }
    deposit()
    {
          let depo=parseInt(prompt("how much you want to deposit"));
          this.balance+=depo;
    }
    checkbalance()
   {
         document.write(`<h1>balance amount : ${this.balance}</h1>`) 
    }
}

let obj=new ATM();
obj.loginpage();
obj.getOption();



-----------------------------------------------------------------------------------------

Inheritance in js:
     1)inheritance is used to inherit parent class to child class.
     2)then we can access all data from parent to child class.
advantage:
     1)reduce the memory space
     2)reusable the code
     3)access one class value to another class

parent to child class
   |
child
super to sub class
base  to derived class

syntax:
class Parent{

}   
 //         inherit
class Child extends Parentclassname{


}

which class we need to create a object?

1)we need to create a object for child class 
2)no need to create obj for parent class
3)using child class object only we can access all the data parent classes 
as well as child class


14)callback function
      1) A callback is a function that is passed as an argument to another function, and is called after the 
main function has finished its execution. 
      2) The main function is called with a callback function as its argument, and when the main function is 
finished, it calls the callback function to provide a result.
      3) Callbacks allow you to handle the results of an asynchronous operation in a non-blocking manner, 
which means that the program can continue to run while the operation is being executed.

----------------------------------------------------------------------------------------------------

15)promises 
     two params: 1.success 2.failure
syntax:
    class Promise{  //library already they defined so we can create a object to access the functionality
}

    let objectname = new Promise(function(resolve, reject){
     //do something
    })
    .then()-> success
    .catch()->failure error
    .finally()-> compulsory we have to execute some code

-----------------------------------------------------------------------------------------------------------------------------------

16)SetTimeOut(function,time)  one time it will render   after 5 sec i have to display alert

time->1000 1 sec

17)setinterval() again and again processing -> every second it will render.  timer

syntax:

setInterval(()=>{
},timer);


hours : minutes : second

second  -> 1 to 60 
minutes  1   to 60
hours   1 

00:01:00








Date Object
  
Math operator (or) math Object:

-----------------------------------------

Dom:
   Using js we can change the document of the html structure as
well as css stylings also

Dom:
1)Document Object Model
2)it creates a tree structure


methods:

1)document.write()  ->
2)document.getElementById()  ->unique
3)document.getElementByTagName()   ->[]
4)document.getElementByClassName()  ->[]
5)document.querySelector()    id ->first id   classname  first class   tag ->first tag 
6)document.querySelectorAll()    ->[]

Ass:

1. firstname   required   should be min 3 max 10  it should only contains letters 
2. lastname    optinal
3. email       reuired as well as it should match with the regular expressiom
4. mobileno    required it should accept 10 digits
5. password    password is required as well as password length should be min 8 max 15
submit -> 

btn

7)buttonidvariable.addEventListener("type",function);
                                    click,mouseover,mouseout                           
8)Adding or removing element
 1)create Element()
 2)CreateTextNode()
 3)append()    
 4)appendChild()
 5)insert row 
 6)insert cell


 First name   -> required length should be min 3 max 15

 Last  name   -> optional

 Email       -> required  

 password    -> length should be 8

 gender      -> o male   o female    o others

 mobileno  -> mobile length should be 10

 Skills:    -> checkbox   [.] c  [.] c++  [] java

 S.No    firstname   lastname   email   password   gender    mobileno     Skills
  1.       raj           -       fy       ygyug      male     56789765    c,c++

-------------------------------------------
BOM:Browser Object Model
     
window.open()
window.close()

window size:
window.innerWidth
911
window.innerHeight
754

window screen
screen.width
1536
screen.height
864

window location:

refresh:

window.location.reload()

window.location.href
'file:///D:/WEB%20DEV/StudentBatches/giri/Js/index.html'

window.location.pathname
'/D:/WEB%20DEV/StudentBatches/giri/Js/index.html'

-----------------------------
What is LocalStorage?
1. localStorage in JavaScript allows web applications to store data locally within the user's browser – with no expiration date.
2. The data isn't deleted when the browser is closed, and is available when the browser is opened again.


How does localStorage work?
You’ve heard it repeatedly by now — localStorage stores data. 
And, if you’re storing data, it means you may need to retrieve it later. 

1.setItem(): Add key and value to localStorage
2.getItem(): This is how you get items from localStorage
3.removeItem(): Remove an item from localStorage
4.clear(): Clear all data from localStorage
5.key(): Passed a number to retrieve the key of a localStorage



CRUD  -> create  read  update delete

































































































































